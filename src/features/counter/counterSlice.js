import { createSlice } from '@reduxjs/toolkit'

/**
 * Counter Slice - Basic Redux Example
 * 
 * This is our first Redux slice that demonstrates:
 * 1. How to define initial state
 * 2. How to create reducers (functions that update state)
 * 3. How actions are automatically generated
 * 4. How to handle different types of state updates
 */

// Define the initial state for our counter
const initialState = {
  value: 0,
  // We can add more properties to demonstrate complex state
  incrementAmount: 1,
  history: [], // Track increment/decrement history
}

/**
 * Create a slice using Redux Toolkit's createSlice
 * This automatically generates action creators and action types
 */
export const counterSlice = createSlice({
  name: 'counter', // This will be the key in our store
  initialState,
  reducers: {
    // Redux Toolkit allows us to write "mutating" logic in reducers
    // It uses Immer behind the scenes to make sure state is updated immutably
    
    /**
     * Increment the counter by 1
     */
    increment: (state) => {
      state.value += 1
      state.history.push({ action: 'increment', value: state.value, timestamp: Date.now() })
    },
    
    /**
     * Decrement the counter by 1
     */
    decrement: (state) => {
      state.value -= 1
      state.history.push({ action: 'decrement', value: state.value, timestamp: Date.now() })
    },
    
    /**
     * Increment by a specific amount
     * This shows how to use action payload
     */
    incrementByAmount: (state, action) => {
      state.value += action.payload
      state.history.push({ 
        action: 'incrementByAmount', 
        amount: action.payload,
        value: state.value, 
        timestamp: Date.now() 
      })
    },
    
    /**
     * Set a custom increment amount
     */
    setIncrementAmount: (state, action) => {
      state.incrementAmount = action.payload
    },
    
    /**
     * Reset counter to initial state
     */
    reset: (state) => {
      state.value = 0
      state.incrementAmount = 1
      state.history.push({ action: 'reset', value: 0, timestamp: Date.now() })
    },
    
    /**
     * Clear history
     */
    clearHistory: (state) => {
      state.history = []
    }
  },
})

// Export action creators - these are automatically generated by createSlice
export const { 
  increment, 
  decrement, 
  incrementByAmount, 
  setIncrementAmount, 
  reset, 
  clearHistory 
} = counterSlice.actions

// Export the reducer to be used in the store
export default counterSlice.reducer

/**
 * Selector functions - these help us extract specific pieces of state
 * It's a good practice to define selectors near the slice
 */
export const selectCount = (state) => state.counter.value
export const selectIncrementAmount = (state) => state.counter.incrementAmount
export const selectHistory = (state) => state.counter.history